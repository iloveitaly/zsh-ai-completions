#compdef alembic

_alembic() {
    local cur prev opts base_opts cmds
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    base_opts='
        -h
        --help
        --version
        -c
        --config
        -n
        --name
        -x
        --raiseerr
        -q
        --quiet
    '
    cmds='
        branches
        check
        current
        downgrade
        edit
        ensure_version
        heads
        history
        init
        list_templates
        merge
        revision
        show
        stamp
        upgrade
    '

    _arguments -C \
        $base_opts \
        "1: :($cmds)" \
        "*::arg:->args"

    case "$prev" in
        -c|--config)
            _files
            return
            ;;
        -n|--name)
            return
            ;;
        -x)
            return
            ;;
    esac

    case "$state" in
        args)
            case "$prev" in
                branches)
                    _alembic_branches
                    ;;
                check)
                    _alembic_check
                    ;;
                current)
                    _alembic_current
                    ;;
                downgrade)
                    _alembic_downgrade
                    ;;
                edit)
                    _alembic_edit
                    ;;
                ensure_version)
                    _alembic_ensure_version
                    ;;
                heads)
                    _alembic_heads
                    ;;
                history)
                    _alembic_history
                    ;;
                init)
                    _alembic_init
                    ;;
                list_templates)
                    _alembic_list_templates
                    ;;
                merge)
                    _alembic_merge
                    ;;
                revision)
                    _alembic_revision
                    ;;
                show)
                    _alembic_show
                    ;;
                stamp)
                    _alembic_stamp
                    ;;
                upgrade)
                    _alembic_upgrade
                    ;;
                *)
                    _arguments \
                        $base_opts
                    ;;
            esac
            ;;
    esac
}

_alembic_branches() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-v[Use more verbose output]' \
        '--verbose[Use more verbose output]'
}

_alembic_check() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]'
}

_alembic_current() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-v[Use more verbose output]' \
        '--verbose[Use more verbose output]'
}

_alembic_downgrade() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '--sql[Don'\''t emit SQL to database - dump to standard output/file instead. See docs on offline mode.]' \
        '--tag[Arbitrary '\''tag'\'' name - can be used by custom env.py scripts.]:tag:' \
        ':revision:'
}

_alembic_edit() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        ':rev:'
}

_alembic_ensure_version() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '--sql[Don'\''t emit SQL to database - dump to standard output/file instead. See docs on offline mode.]'
}

_alembic_heads() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-v[Use more verbose output]' \
        '--verbose[Use more verbose output]' \
        '--resolve-dependencies[Treat dependency versions as down revisions]'
}

_alembic_history() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-r[Specify a revision range; format is [start]:[end]]:rev_range:' \
        '--rev-range[Specify a revision range; format is [start]:[end]]:rev_range:' \
        '-v[Use more verbose output]' \
        '--verbose[Use more verbose output]' \
        '-i[Indicate the current revision]' \
        '--indicate-current[Indicate the current revision]'
}

_alembic_init() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-t[Setup template for use with '\''init'\'']:template:' \
        '--template[Setup template for use with '\''init'\'']:template:' \
        '--package[Write empty __init__.py files to the environment and version locations]' \
        ':directory:_files -/'
}

_alembic_list_templates() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]'
}

_alembic_merge() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-m[Message string to use with '\''revision'\'']:message:' \
        '--message[Message string to use with '\''revision'\'']:message:' \
        '--branch-label[Specify a branch label to apply to the new revision]:branch_label:' \
        '--rev-id[Specify a hardcoded revision id instead of generating one]:rev_id:' \
        '*:revisions:'
}

_alembic_revision() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '-m[Message string to use with '\''revision'\'']:message:' \
        '--message[Message string to use with '\''revision'\'']:message:' \
        '--autogenerate[Populate revision script with candidate migration operations, based on comparison of database to model.]' \
        '--sql[Don'\''t emit SQL to database - dump to standard output/file instead. See docs on offline mode.]' \
        '--head[Specify head revision or <branchname>@head to base new revision on.]:head:' \
        '--splice[Allow a non-head revision as the '\''head'\'' to splice onto]' \
        '--branch-label[Specify a branch label to apply to the new revision]:branch_label:' \
        '--version-path[Specify specific path from config for version file]:version_path:_files -/' \
        '--rev-id[Specify a hardcoded revision id instead of generating one]:rev_id:' \
        '--depends-on[Specify one or more revision identifiers which this revision should depend on.]:depends_on:'
}

_alembic_show() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        ':rev:'
}

_alembic_stamp() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '--sql[Don'\''t emit SQL to database - dump to standard output/file instead. See docs on offline mode.]' \
        '--tag[Arbitrary '\''tag'\'' name - can be used by custom env.py scripts.]:tag:' \
        '--purge[Unconditionally erase the version table before stamping]' \
        '*:revisions:'
}

_alembic_upgrade() {
    _arguments \
        '-h[show this help message and exit]' \
        '--help[show this help message and exit]' \
        '--sql[Don'\''t emit SQL to database - dump to standard output/file instead. See docs on offline mode.]' \
        '--tag[Arbitrary '\''tag'\'' name - can be used by custom env.py scripts.]:tag:' \
        ':revision:'
}
