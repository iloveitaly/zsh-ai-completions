Here is a zsh completion script for IPython:

#compdef ipython

local -a subcommands
subcommands=(
  'profile:Create and manage IPython profiles'
  'kernel:Start a kernel without an attached frontend'
  'locate:Print the path to the IPython dir'
  'history:Manage the IPython history database'
)

_arguments \
  '--debug[Set log level to DEBUG]' \
  '--show-config[Show configuration]' \
  '--show-config-json[Show configuration in JSON]' \
  '--quiet[Set log level to CRITICAL]' \
  '--init[Initialize profile with default config]' \
  '--autoindent[Turn on autoindenting]' \
  '--no-autoindent[Turn off autoindenting]' \
  '--automagic[Turn on automagic]' \
  '--no-automagic[Turn off automagic]' \
  '--pdb[Enable auto pdb debugger]' \
  '--no-pdb[Disable auto pdb debugger]' \
  '--pprint[Enable auto pretty printing]' \
  '--no-pprint[Disable auto pretty printing]' \
  '--color-info[Enable color for info]' \
  '--no-color-info[Disable color for info]' \
  '--ignore-cwd[Exclude CWD from sys.path]' \
  '--no-ignore-cwd[Include CWD in sys.path]' \
  '--nosep[Eliminate prompt spacing]' \
  '--pylab[Pre-load matplotlib and numpy]' \
  '--matplotlib[Configure matplotlib]' \
  '--autoedit-syntax[Auto edit files with syntax errors]' \
  '--no-autoedit-syntax[Disable auto editing]' \
  '--simple-prompt[Use simple prompt]' \
  '--no-simple-prompt[Use rich prompt]' \
  '--banner[Display banner on startup]' \
  '--no-banner[Hide banner on startup]' \
  '--confirm-exit[Confirm on exit]' \
  '--no-confirm-exit[Do not confirm on exit]' \
  '--term-title[Enable auto terminal title]' \
  '--no-term-title[Disable auto terminal title]' \
  '--classic[Use classic Python-like interface]' \
  '--quick[Quick startup with no config]' \
  '-i[Interactive mode after running script]' \
  '--log-level=[Set log level]:level:(DEBUG INFO WARN ERROR CRITICAL)' \
  '--profile-dir=[Set profile directory]:directory:_files -/' \
  '--profile=[IPython profile to use]:profile:' \
  '--ipython-dir=[IPython directory]:directory:_files -/' \
  '--config=[Extra config file]:config file:_files' \
  '--autocall=[Autocall mode]:mode:(0 1 2)' \
  '--colors=[Color scheme]:scheme:(NoColor Neutral Linux LightBG)' \
  '--logfile=[Log file]:file:_files' \
  '--logappend=[Append log file]:file:_files' \
  '-c[Execute command string]:command:' \
  '-m[Run module as script]:module:' \
  '--ext=[Load extensions]:extension:' \
  '--gui=[GUI event loop]:gui:(asyncio glut gtk gtk2 gtk3 gtk4 osx pyglet qt qt5 qt6 tk wx)' \
  '--pylab=[Matplotlib backend]:backend:(agg auto gtk gtk3 gtk4 inline ipympl nbagg notebook osx pdf ps qt qt4 qt5 qt6 svg tk webagg widget wx)' \
  '--matplotlib=[Matplotlib backend]:backend:(agg auto gtk gtk3 gtk4 inline ipympl nbagg notebook osx pdf ps qt qt4 qt5 qt6 svg tk webagg widget wx)' \
  '--cache-size=[Output cache size]:size:' \
  '1: :->cmds' \
  '*:: :->args'

case $state in
  cmds)
    _describe -t commands 'ipython commands' subcommands
    ;;
  args)
    case $words[1] in
      profile)
        _ipython_profile
        ;;
      kernel)
        _ipython_kernel  
        ;;
      locate)
        _ipython_locate
        ;;
      history)
        _ipython_history
        ;;
    esac
    ;;
esac

# Subcommand completions
_ipython_profile() {
  _arguments \
    'create:Create a new profile' \
    'list:List available profiles'
}

_ipython_kernel() {
  _arguments \
    '--ip=[IP address]:ip:' \
    '--stdin=[Stdin socket]:port:' \
    '--shell=[Shell socket]:port:' \
    '--iopub=[IOPub socket]:port:'
}

_ipython_locate() {
  _arguments \
    'profile:Locate profile directory'
}

_ipython_history() {
  _arguments \
    'trim:Trim history database' \
    'clear:Clear history database'
}

