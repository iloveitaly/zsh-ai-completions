#compdef nixpacks

_nixpacks() {
  local state opt_args

  _arguments \
    '1:cmd:(plan detect build help)' \
    '*::args:->args'

  case $state in
    args)
      case $words[1] in
        plan)
          _arguments \
            '1:path:_files' \
            '-f:format:(json toml)' \
            '--format=[Specify the output format of the build plan]:format:(json toml)' \
            '--json-plan=[Specify an entire build plan in json format that should be used to configure the build]:json-plan:_files' \
            '-i:install-cmd:' \
            '--install-cmd=[Specify the install command to use]:install-cmd:' \
            '-b:build-cmd:' \
            '--build-cmd=[Specify the build command to use]:build-cmd:' \
            '-s:start-cmd:' \
            '--start-cmd=[Specify the start command to use]:start-cmd:' \
            '-p:pkgs:' \
            '--pkgs=[Provide additional nix packages to install in the environment]:pkgs:' \
            '-a:apt:' \
            '--apt=[Provide additional apt packages to install in the environment]:apt:' \
            '--libs=[Provide additional nix libraries to install in the environment]:libs:' \
            '-e:env:' \
            '--env=[Provide environment variables to your build]:env:' \
            '-c:config:_files' \
            '--config=[Path to config file]:config:_files' \
            '-h:help' \
            '--help' \
            '-V:version' \
            '--version'
          ;;
        detect)
          _arguments \
            '1:path:_files' \
            '--json-plan=[Specify an entire build plan in json format that should be used to configure the build]:json-plan:_files' \
            '-i:install-cmd:' \
            '--install-cmd=[Specify the install command to use]:install-cmd:' \
            '-b:build-cmd:' \
            '--build-cmd=[Specify the build command to use]:build-cmd:' \
            '-s:start-cmd:' \
            '--start-cmd=[Specify the start command to use]:start-cmd:' \
            '-p:pkgs:' \
            '--pkgs=[Provide additional nix packages to install in the environment]:pkgs:' \
            '-a:apt:' \
            '--apt=[Provide additional apt packages to install in the environment]:apt:' \
            '--libs=[Provide additional nix libraries to install in the environment]:libs:' \
            '-e:env:' \
            '--env=[Provide environment variables to your build]:env:' \
            '-c:config:_files' \
            '--config=[Path to config file]:config:_files' \
            '-h:help' \
            '--help' \
            '-V:version' \
            '--version'
          ;;
        build)
          _arguments \
            '1:path:_files' \
            '-n:name:' \
            '--name=[Name for the built image]:name:' \
            '-o:out:_files' \
            '--out=[Save output directory instead of building it with Docker]:out:_files' \
            '--json-plan=[Specify an entire build plan in json format that should be used to configure the build]:json-plan:_files' \
            '-t:tag:' \
            '--tag=[Additional tags to add to the output image]:tag:' \
            '-i:install-cmd:' \
            '--install-cmd=[Specify the install command to use]:install-cmd:' \
            '-l:label:' \
            '--label=[Additional labels to add to the output image]:label:' \
            '-b:build-cmd:' \
            '--build-cmd=[Specify the build command to use]:build-cmd:' \
            '--platform=[Set target platform for your output image]:platform:' \
            '--cache-key=[Unique identifier to key cache by. Defaults to the current directory]:cache-key:' \
            '-s:start-cmd:' \
            '--start-cmd=[Specify the start command to use]:start-cmd:' \
            '--current-dir' \
            '-p:pkgs:' \
            '--pkgs=[Provide additional nix packages to install in the environment]:pkgs:' \
            '-a:apt:' \
            '--apt=[Provide additional apt packages to install in the environment]:apt:' \
            '--no-cache' \
            '--incremental-cache-image=[Image to hold the cached directories between builds]:incremental-cache-image:' \
            '--libs=[Provide additional nix libraries to install in the environment]:libs:' \
            '--cache-from=[Image to consider as cache sources]:cache-from:' \
            '-e:env:' \
            '--env=[Provide environment variables to your build]:env:' \
            '-c:config:_files' \
            '--config=[Path to config file]:config:_files' \
            '--docker-host=[Specify host for Docker client]:docker-host:' \
            '--add-host=[Adds hosts to the Docker build]:add-host:' \
            '--docker-tls-verify=[Specify if Docker client should verify the TLS (Transport Layer Security) certificates]:docker-tls-verify:' \
            '--docker-output=[Specify output destination for Docker build. https://docs.docker.com/reference/cli/docker/buildx/build/#output]:docker-output:' \
            '--docker-cert-path=[Specify the path to the Docker client certificates]:docker-cert-path:_files' \
            '--inline-cache' \
            '--no-error-without-start' \
            '--cpu-quota=[Limit the CPU CFS (Completely Fair Scheduler) quota. Passed directly to the docker build command]:cpu-quota:' \
            '--memory=[Memory limit. Passed directly to the docker build command]:memory:' \
            '-v:verbose' \
            '--verbose' \
            '-h:help' \
            '--help' \
            '-V:version' \
            '--version'
          ;;
        help)
          _arguments \
            '-h:help' \
            '--help'
          ;;
      esac
      ;;
  esac
}


_nixpacks "$@"

